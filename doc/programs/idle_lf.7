.TH GGIDLE\ LF\ CONFIGS 7

.SH NAME
lf - Terminal file manager written in Go, GG's IDLE configuration and workflow.

.SH INTRO
Lf is inspired by ranger, but less bloated and it's actually a binary (Go) and not a Python program. Lf is still in development, so you can find problems.

.SH GENERAL
The interpreter for shell commands is bash, but you'll still get in zsh if you open a terminal inside lf.

Lf works with a server-client architeture, so you can have multiple instances of it and they'll act as one (ex: you can cut a file from one instance and paste it on another). On IDLE, unlike the default config, lf will quit the entire server if no clients are running.

On aesthetics, the most important thing to notice are the file icons. They're Nerd Fonts icons and are configured by the enviroment variable $LF_ICONS setted by the file $HOME/.pam_enviroment.

.SH FUNCTIONS
The functions defined on lfrc are the following:

.TP
.B open
to manage how to open files
.TP
.B delete
to delete files (lf currently cannot delete files by default)
.TP
.B extract
a helper to extract tar files
.TP
.B tar
a helper to compress files
.TP
.B bulk-rename
need no explaining
.TP
.B mkdir
so we can create directories
.TP
.B touch
so we can create files

.SH BINDS

Here are listed only the keys binded besides the default ones

.TP
.B Enter
run a shell command
.TP
.B x
execute a executable file
.TP
.B Backspace
runs delete function (so deletes the file)
.TP
.B t
runs extract function (so extracts a tar file)
.TP
.B T
runs tar function (so compress a file with tar)
.TP
.B a
toggle hidden files
.TP
.B R
opens bulk-rename
.TP
.B m
runs touch function (so creates/literally touches files)
.TP
.B M
runs mkdir function (so creates directories)

.SH OPEN AND PREVIEW
The program to use to open a file is choosed by \fIopen function\fR. You can see it in lfrc to learn more. The preview is handled by the scope script in lf's configuration directory. Also, you can read it if you want to learn more about.
